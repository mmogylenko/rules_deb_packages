"""
Provides functions to pull all external package dependencies of this repository.
"""

load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

# buildifier: disable=bzl-visibility
load("//deb/private:toolchains_repo.bzl", "PLATFORMS", "TOOLS", "toolchains_repo")

# def rules_deb_dependencies():
#     """Pull in external Go packages needed by Go binaries in this repo. """

#     maybe(
#         http_archive,
#         name = "bazel_skylib",
#         sha256 = "66ffd9315665bfaafc96b52278f57c7e2dd09f5ede279ea6d39b2be471e7e3aa",
#         urls = [
#             "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.4.2/bazel-skylib-1.4.2.tar.gz",
#             "https://github.com/bazelbuild/bazel-skylib/releases/download/1.4.2/bazel-skylib-1.4.2.tar.gz",
#         ],
#     )

#     http_archive(
#         name = "rules_pkg",
#         urls = [
#             "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.9.1/rules_pkg-0.9.1.tar.gz",
#             "https://github.com/bazelbuild/rules_pkg/releases/download/0.9.1/rules_pkg-0.9.1.tar.gz",
#         ],
#         sha256 = "8f9ee2dc10c1ae514ee599a8b42ed99fa262b757058f65ad3c384289ff70c4b8",
#     )

_DOC = "TODO"
_ATTRS = {
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
    "version": attr.string(mandatory = True),
}

def _deb_packages_repo_impl(repository_ctx):
    repository_ctx.report_progress("Downloading DEB releases info")
    repository_ctx.download(
        url = ["https://api.github.com/repos/mmogylenko/rules_deb_packages/releases"],
        output = "versions.json",
    )
    versions = repository_ctx.read("versions.json")
    version_found = False
    for v in json.decode(versions):
        version = v["tag_name"].lstrip("v")
        if version == repository_ctx.attr.version:
            version_found = True
    if not version_found:
        fail("did not find {} version in https://api.github.com/repos/mmogylenko/rules_deb_packages/releases".format(repository_ctx.attr.version))

    tools_dict = {}
    for tool in TOOLS:
        file_url = "https://github.com/mmogylenko/rules_deb_packages/releases/download/v{}/{}_{}".format(repository_ctx.attr.version, tool, repository_ctx.attr.platform)
        repository_ctx.report_progress("Downloading %s toolchain" % tool)

        repository_ctx.download(
            url = file_url,
            output = "{}_{}".format(tool, repository_ctx.attr.platform),
            executable = True,
        )

        tools_dict[tool] = "@{}//:{}_{}".format(repository_ctx.name, tool, repository_ctx.attr.platform)

    tools_content = ",\n    ".join(['{} = "{}"'.format(tool, label) for tool, label in tools_dict.items()])

    build_content = """#Generated by repositories.bzl
load("@rules_deb_packages//deb:toolchain.bzl", "deb_packages_toolchain")

deb_packages_toolchain(
    name = "deb_toolchain",
    {}
)
""".format(tools_content)

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

deb_packages_repositories = repository_rule(
    _deb_packages_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def deb_packages_register_toolchains(name, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "deb_linux_amd64" -
      this repository is lazily fetched when debian tools are needed for that platform.
    Users can avoid this macro and do these steps themselves, if they want more control.

    Args:
        name: base name for all created repos, like "deb_packages_0.0.1"
        **kwargs: passed to each rules_deb_dependencies call
    """
    rules_pkg_dependencies()
    for platform in PLATFORMS.keys():
        deb_packages_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )

    for platform in PLATFORMS.keys():
        native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

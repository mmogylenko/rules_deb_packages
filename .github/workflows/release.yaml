# Cut a release whenever a new tag is pushed to the repo.
name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  tools:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: ["linux", "darwin"]
        cpu: ["amd64", "arm64"]
        application:
          - "debian_package_manager"
          - "debian_spdx"
          - "dpkg_status"
          - "oci_image_spdx"
        executable_mime:
          ["application/x-executable", "application/x-mach-binary"]
        exclude:
          - os: darwin
            cpu: s390x
          - os: darwin
            executable_mime: "application/x-executable"
          - os: linux
            executable_mime: "application/x-mach-binary"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Mount bazel caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazel-repo
          key: bazel-cache-${{ hashFiles('**/BUILD.bazel', '**/*.bzl', 'WORKSPACE') }}
          restore-keys: bazel-cache-
      - name: Build ${{ matrix.os }}_${{ matrix.cpu }} Binary
        run: |
          bazel build --platforms=@io_bazel_rules_go//go/toolchain:${{ matrix.os }}_${{ matrix.cpu }} //cmd/${{ matrix.application }}:${{ matrix.application }}
      - run: cp $(bazel info bazel-bin)/cmd/${{ matrix.application }}/${{ matrix.application }}_/${{ matrix.application }} ${{ matrix.application }}_${{ matrix.os }}_${{ matrix.cpu }}
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ${{ matrix.application }}_${{ matrix.os }}_${{ matrix.cpu }}

  release:
    runs-on: ubuntu-latest
    needs: tools
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: Release Version
        id: tag
        uses: actions/github-script@v6
        with:
          script: |
            const tag = process.env.GITHUB_REF_NAME
            const no_v = tag.replace('v', '')
            core.setOutput('version_no_v', no_v)
            core.setOutput('version', tag)
      - name: Build release archive
        env:
          # Bazelisk will download bazel to here
          XDG_CACHE_HOME: ~/.cache/bazel-repo
        run: bazel --bazelrc=$GITHUB_WORKSPACE/.github/workflows/ci.bazelrc --bazelrc=$GITHUB_WORKSPACE/.bazelrc build rules_deb_packages
      - name: Set versioned archive name
        run: cp bazel-bin/rules_deb_packages.tar.gz dist/rules_deb_packages-${{steps.tag.outputs.version}}.tar.gz
      - name: Export checksum
        run: 'echo "RELEASE_CHECKSUM=$(shasum -b -a 256 dist/rules_deb_packages-${{steps.tag.outputs.version}}.tar.gz | cut -d " " -f 1)" >> $GITHUB_ENV'
      - name: debug-show-dir2
        run: |
          ls -la dist/

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: dist/*
          body: |
            WORKSPACE snippet:

            ```starlark

            load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

            http_archive(
                name = "rules_deb_packages",
                sha256 = "${{ env.RELEASE_CHECKSUM }}",
                url = "https://github.com/mmogylenko/rules_deb_packages/releases/download/${{steps.tag.outputs.version}}/rules_deb_packages-${{steps.tag.outputs.version}}.tar.gz",
            )

            load("@rules_deb_packages//deb:dependencies.bzl", "rules_deb_dependencies")

            rules_deb_dependencies()

            load("@rules_deb_packages//deb:repositories.bzl", "deb_packages_register_toolchains")

            deb_packages_register_toolchains(
                name = "deb_packages",
                version = "${{steps.tag.outputs.version_no_v}}",
            )
            ```
